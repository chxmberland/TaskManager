{"version":3,"sources":["Components/Form.jsx","Components/Day.jsx","Components/Calendar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","props","useState","input","setInput","toLoad","localStorage","getItem","day","JSON","parse","error","tasks","setTasks","toggleChecked","id","newList","i","length","checked","push","saveTasks","toSave","setItem","stringify","className","type","placeholder","onChange","e","target","value","onClick","newTask","Math","random","todo","newTasks","map","task","toString","filter","deleteTask","Day","Calendar","days","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48b324a4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst Form = (props) => {\r\n\r\n    const [input, setInput] = useState('');\r\n    const [tasks, setTasks] = useState(() => {\r\n        try {\r\n            const toLoad = localStorage.getItem(props.day + '-list');\r\n            return toLoad ? JSON.parse(toLoad) : [];\r\n        } catch (error) {\r\n            return [];\r\n        }\r\n    });\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const addTask = e => {\r\n        if (input.length !== 0) {\r\n            const newTask = {\r\n                id: 1 + Math.random() * 100000,\r\n                todo: { input },\r\n                checked: false\r\n            };\r\n            const newTasks = [...tasks];\r\n            newTasks.push(newTask);\r\n            saveTasks(newTasks);\r\n            setTasks(newTasks);\r\n            setInput('');\r\n        }\r\n    }\r\n    \r\n    const toggleChecked = (id) => {\r\n        const newList = [];\r\n        for (var i = 0; i < tasks.length; i++) {\r\n            if (tasks[i].id === id && tasks[i].checked) {\r\n                tasks[i].checked = false;\r\n            } else if (tasks[i].id === id && !(tasks[i].checked)) {\r\n                tasks[i].checked = true;\r\n            }\r\n            newList.push(tasks[i]);\r\n        }\r\n        saveTasks(newList);\r\n        setTasks(newList);\r\n    }\r\n\r\n    const deleteTask = (id) => {\r\n        saveTasks();\r\n        const newTasks = tasks.filter(task => task.id !== id);\r\n        saveTasks(newTasks);\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    const saveTasks = (toSave) => {\r\n        localStorage.setItem(props.day + '-list', JSON.stringify(toSave));\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <form className = 'input-form'>\r\n                <input \r\n                    type = 'text' \r\n                    className = 'text-input' \r\n                    placeholder = 'Add task...' \r\n                    onChange = { handleChange } \r\n                    value = { input }\r\n                ></input>\r\n                <button \r\n                    type = 'button'\r\n                    className = 'add-item-btn' \r\n                    onClick = { addTask }\r\n                >+</button>\r\n            </form>\r\n            <div className = 'task-render-wrapper'>\r\n                { tasks.map(task => (\r\n                    <div className = 'task-container' key = { task.id }>\r\n                        { task.checked \r\n                            ? <p className = 'task-text-container task-checked' onClick = { () => toggleChecked(task.id) }>{ task.todo.input.toString() }</p>\r\n                            : <p className = 'task-text-container'              onClick = { () => toggleChecked(task.id) }>{ task.todo.input.toString() }</p>\r\n                        }\r\n                        <button className = 'clear-button' onClick = { () => deleteTask(task.id) }>x</button>\r\n                    </div>\r\n                )) }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\nimport Form from './Form.jsx'\r\n\r\nconst Day = (props) => {\r\n\r\n    return (\r\n        <div className = 'day'>\r\n            <h1 className = 'day-title'>{ props.day }</h1>\r\n            <Form day = { props.day }/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Day\r\n","import Day from './Day.jsx'\r\nimport React from 'react'\r\n\r\nconst Calendar = () => {\r\n\r\n    //Creating an array which holds the names of the days in the week\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n    return (\r\n\r\n        //Rendering a Day element for each day of the week\r\n        <div className = 'calendar'>\r\n            <Day day = { days[0] } />\r\n            <Day day = { days[1] } />\r\n            <Day day = { days[2] } />\r\n            <Day day = { days[3] } />\r\n            <Day day = { days[4] } />\r\n            <Day day = { days[5] } />\r\n            <Day day = { days[6] } />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Calendar","import Calendar from './Components/Calendar.jsx';\nimport './index.css';\n\nfunction App() {\n    return (\n        <div className =\"App\">\n            <Calendar />\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}